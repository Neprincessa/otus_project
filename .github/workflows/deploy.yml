name: Wekan App in Yandex K8S

on:
  push:
    branches: [ master ]

env:
  YC_CLUSTER_NAME: "project"
  YC_NETWORK_NAME: "default"
  YC_SUBNET_NAME: "default-ru-central1-a"
  YC_NODE_COUNT: "2"
  YC_NODE_GROUP: "main-nodes"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    # Установка YC CLI
    - name: Install YC CLI
      run: |
        curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash -s -- -a 
        sudo apt-get install -y jq       
        echo "$HOME/yandex-cloud/bin" >> $GITHUB_PATH 

    # Инициализация утилиты
    - name: Configure YC CLI
      run: |
        yc config set token ${{secrets.YC_CLOUD_OAUTH_TOKEN}}
        yc config set cloud-id ${{ secrets.YC_CLOUD_ID }}
        yc config set folder-id ${{ secrets.YC_FOLDER_ID }}

    # Проверка аутентификации
    - name: Test YC CLI
      run: |
        yc config get folder-id > folder_id.txt

    # Создание Kubernetes-кластера
    - name: Create Yandex Managed Kubernetes Cluster
      run: |
        if ! yc managed-kubernetes cluster get --name  ${{env.YC_CLUSTER_NAME}}  >/dev/null 2>&1; then
          yc managed-kubernetes cluster create  \
            --name ${{env.YC_CLUSTER_NAME}}  \
            --network-name ${{env.YC_NETWORK_NAME}} \
            --zone ru-central1-a  \
            --subnet-name  ${{env.YC_SUBNET_NAME}}   \
            --public-ip  \
            --service-account-name ${{secrets.YC_SA_KEY_NAME}} \
            --node-service-account-name ${{secrets.YC_SA_KEY_NAME}}
        else
          echo "Cluster '${{env.YC_CLUSTER_NAME}}' already exists, skipping creation"
        fi

    # Создание node-group для Kubernetes-кластера
    - name: Create Yandex Managed Kubernetes Cluster node-group
      run: |
        if ! yc managed-kubernetes node-group get --name ${{env.YC_NODE_GROUP}} >/dev/null 2>&1; then
          yc managed-kubernetes --folder-id=${{ secrets.YC_FOLDER_ID }} node-group create \
                  --name ${{env.YC_NODE_GROUP}}  \
                  --cluster-name  ${{env.YC_CLUSTER_NAME}} \
                  --cores 4 \
                  --memory 4 \
                  --disk-type network-ssd \
                  --fixed-size 1 \
                  --disk-size 64 \
                  --network-interface subnets=default-ru-central1-a,security-group-ids=enp6ink0ponebrv6uqui \
                  --async
                  else
          echo "Node group '${{env.YC_NODE_GROUP}}' already exists, skipping creation"
        fi

    # Проверка работоспособности
    - name: Get Kubeconfig
      run: |
        yc managed-kubernetes cluster get-credentials ${{ env.YC_CLUSTER_NAME }} --external
        kubectl config view --raw > kubeconfig.yaml

  # Установка helm, grafana, loki, promtail
  configure_tools:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
    - name: Checkout code
      uses: actions/checkout@v3  
    
    # Установка Helm
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}


    # Установка ingress
    - name: Deploy Ingress NGINX
      run: |
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
        helm repo update
        helm install ingress-nginx ingress-nginx/ingress-nginx \
        --namespace ingress-nginx \
        --set controller.service.type=LoadBalancer \
        --set controller.service.externalTrafficPolicy=Local \
        --set controller.service.annotations."yandex\.cloud/load-balancer-type"=external \
        --set controller.service.annotations."yandex\.cloud/subnet-id"=e9bd98gq845t7cfn2qec \
        --set controller.service.annotations."yandex\.cloud/network-id"=enpk98l23krfjo0gnenl
      continue-on-error: true

    # Установка мониторинга
    - name: Deploy Loki-Stack
      run: |
        helm install loki loki-distributed/ -f values/loki_values.yaml -n monitoring --create-namespace 
        helm upgrade grafana ./grafana/ -f values/grafana_values.yaml -n monitoring
        kubectl get secret --namespace logging loki-grafana -o jsonpath="{.data.admin-password}" | base64 --decode ; echo
        kubectl apply -f ingress/grafana-ing.yaml
        helm install promtail/ promtail -n monitoring
      continue-on-error: true